using System.IO;

namespace Chisel;

internal sealed class MermaidWriter : GraphWriter
{
    public MermaidWriter(TextWriter writer) : base(writer)
    {
    }

    protected override void WriteHeader(GraphDirection graphDirection)
    {
        Writer.WriteLine("%% Generated by https://github.com/0xced/Chisel");
        Writer.WriteLine();
        Writer.Write("graph");
        if (graphDirection == GraphDirection.LeftToRight)
            Writer.Write(" LR");
        else if (graphDirection == GraphDirection.TopToBottom)
            Writer.Write(" TB");
        Writer.WriteLine();

        Writer.WriteLine();
        Writer.WriteLine("classDef default fill:aquamarine,stroke:aquamarine");
        Writer.WriteLine("classDef project fill:skyblue,stroke:skyblue");
        Writer.WriteLine("classDef unknown fill:khaki,stroke:khaki");
        Writer.WriteLine("classDef ignored fill:lightgray,stroke:lightgray");
        Writer.WriteLine("classDef removed fill:lightcoral,stroke:lightcoral");
        Writer.WriteLine();
    }

    protected override void WriteFooter()
    {
    }

    protected override void WriteNode(Package package)
    {
        Writer.Write($"class {package.Id} ");
        if (package.State == PackageState.Ignore)
        {
            Writer.WriteLine("ignored");
        }
        else if (package.State == PackageState.Remove)
        {
            Writer.WriteLine("removed");
        }
        else if (package.Type == PackageType.Unknown)
        {
            Writer.WriteLine("unknown");
        }
        else if (package.Type == PackageType.Project)
        {
            Writer.WriteLine("project");
        }
        else
        {
            Writer.WriteLine("default");
        }
    }

    protected override void WriteEdge(Package package, Package dependency)
    {
        Writer.WriteLine($"{package.Id} --> {dependency.Id}");
    }
}