using System.IO;

namespace Chisel;

internal sealed class MermaidWriter(TextWriter writer) : GraphWriter(writer)
{
    public override string FormatName => "Mermaid";

    protected override void WriteHeader(GraphOptions options)
    {
        Writer.WriteLine("%% Generated by https://github.com/0xced/Chisel");
        Writer.WriteLine();
        Writer.Write("graph");
        if (options.Direction == GraphDirection.LeftToRight)
            Writer.Write(" LR");
        else if (options.Direction == GraphDirection.TopToBottom)
            Writer.Write(" TB");
        Writer.WriteLine();

        Writer.WriteLine();
        Writer.WriteLine($"classDef default fill:{options.Color.Default.Fill},stroke:{options.Color.Default.Stroke}");
        Writer.WriteLine($"classDef project fill:{options.Color.Project.Fill},stroke:{options.Color.Project.Stroke}");
        Writer.WriteLine($"classDef ignored fill:{options.Color.Ignored.Fill},stroke:{options.Color.Ignored.Stroke}");
        Writer.WriteLine($"classDef removed fill:{options.Color.Removed.Fill},stroke:{options.Color.Removed.Stroke}");
        Writer.WriteLine();
    }

    protected override void WriteFooter()
    {
    }

    protected override void WriteNode(Package package, GraphOptions options)
    {
        var className = package.State switch
        {
            PackageState.Ignore => "ignored",
            PackageState.Remove => "removed",
            _ => package.IsProjectReference ? "project" : "default",
        };
        Writer.WriteLine($"class {GetPackageId(package, options)} {className}");
    }

    protected override void WriteEdge(Package package, Package dependency, GraphOptions options)
    {
        Writer.WriteLine($"{GetPackageId(package, options)} --> {GetPackageId(dependency, options)}");
    }
}